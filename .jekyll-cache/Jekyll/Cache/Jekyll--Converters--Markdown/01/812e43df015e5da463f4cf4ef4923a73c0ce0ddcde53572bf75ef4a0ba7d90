I"Q<h2 id="概念性关键点">概念性关键点</h2>

<ul>
  <li>本身是一门语言</li>
  <li>不能单独使用，需要其他语言转换才能发挥它的作用</li>
  <li>正则表达式本身是一个由特殊字符组成的一个由规则的字符串</li>
  <li>正则表达式一般用于对其他字符串进行逻辑过滤（验证信息是否合法、替换字符、分割、搜索）</li>
</ul>

<h2 id="用途">用途</h2>

<ol>
  <li>检查字符串的合法性
    <ol>
      <li>验证用户名（a-z, 0-9, 不能全是数字，不能全是字母）</li>
      <li>验证邮箱格式（XXX@qq.com）</li>
      <li>验证电话号码（11位数字）</li>
      <li>验证身份证（18位）</li>
      <li>验证QQ号码格式（5-12纯数字，第一位不能为0）；</li>
    </ol>
  </li>
  <li>提取字符串中的信息
    <ol>
      <li>提取一条短信中的数字</li>
      <li>提取文件名后缀</li>
    </ol>
  </li>
  <li>替换字符串
    <ol>
      <li>替换字符串中的非法字符</li>
      <li>对电话号码进行屏蔽</li>
      <li>替换占位符“hello ”</li>
    </ol>
  </li>
</ol>

<h2 id="定义">定义</h2>

<p><code class="language-plaintext highlighter-rouge">var expression = /pattern/[flags]</code></p>

<pre><code class="language-JS">var expression = /abc/;
</code></pre>

<p>或者</p>

<p><code class="language-plaintext highlighter-rouge">var expression = new RegExp('pattern'[, 'flags'])</code></p>

<pre><code class="language-JS"> var expression = new RegExp('9', 'i');
</code></pre>

<div class="alert alert-info" role="alert"><i class="fa fa-info-circle"></i> <b>Note:</b> 模式修饰符可以连着写。</div>

<h3 id="特殊的表示">特殊的表示</h3>

<p><code class="language-plaintext highlighter-rouge">\\d</code>，<code class="language-plaintext highlighter-rouge">\d</code>代表0-9之间的数字，特殊字符用反斜杠。</p>

<h2 id="正则表达式的测试方法">正则表达式的测试方法</h2>

<table>
  <thead>
    <tr>
      <th>测试方式</th>
      <th>返回结果</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">expression.test(string)</code></td>
      <td>返回<code class="language-plaintext highlighter-rouge">true</code>或<code class="language-plaintext highlighter-rouge">false</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">expression.exec(string)</code></td>
      <td>返回数组或<code class="language-plaintext highlighter-rouge">null</code></td>
    </tr>
  </tbody>
</table>

<div class="alert alert-info" role="alert"><i class="fa fa-info-circle"></i> <b>Note:</b> 返回的数组含有检测到的子串，子串在母串中的索引值，检测的母串。</div>

<p>一旦检测到子串，会立即返回数组。如果再运行一次同样的方法，会检测到第二次出现子串的索引值，以此类推。</p>

<pre><code class="language-JS">var str = "...";

var result = expression.test(str);

console.log(result);
</code></pre>

<h2 id="字符串的检测方法">字符串的检测方法</h2>

:ET