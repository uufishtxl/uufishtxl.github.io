I"½
<p>This is based on Daniel Shiffmanâ€™s video tutorial on <strong>Working with Data and APIs in JavaScript</strong>.</p>

<h2 id="resource">Resource</h2>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/q-lUgFxwjEM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<h2 id="purpose">Purpose</h2>

<p>Make a <code class="language-plaintext highlighter-rouge">GET</code> request to a route on the server and have the route return all the data from the database.</p>

<h2 id="step-1-eatablish-a-route">Step 1: Eatablish a route</h2>

<p>Establish a route on the server and the client sides to make handshake possible.</p>

<h3 id="1-a-client-side">1-A: Client side</h3>

<pre><code class="language-JavaScript">// run function
getData();
// make a function
async function getData() {
  // For a GET request, you don't have to explicitly specify the method, given that GET is the default. You still can still use /api because its GET route are not occupied
  const response = await fetch('api');
  const data = await response.json();
  console.log(data);
}
</code></pre>

<p>Uptill now, it doesnâ€™t really work. You have to complete the route on the server side.</p>

<h3 id="1-b-server-side">1-B: Server side</h3>

<pre><code class="language-JavaScript">app.get('api', (request, response) =&gt; {
  response.json({test: 123});
});
</code></pre>

<p>Restart the node.js service and access the page. You may see the printout on your dev console.</p>

<h2 id="step-2-query-the-database-and-find-everything">Step 2: Query the database and find everything</h2>

<pre><code class="language-JavaScript">app.get('/api', (request, response) =&gt; {
  database.find({}, (err, data) =&gt; { // leave the curly braces empty to find everything in the database
    // error handling
    if (err) { 
      response.end();
      return;
    }
    response.json(data);
  });
});
</code></pre>

<h2 id="step-3-receive-and-parse-data-on-client">Step 3: Receive and parse data on client</h2>

<pre><code class="language-JavaScript">for (item of data) {
  const root = document.createElement('div'); // root div
  const geo = document.createElement('div'); // accommodate geolocation information
  const date = document.createElement('div'); // accommodate date information

  // Add text to div elements:
  geo.textContent = `Latitude: ${item.lat}Â°, Longitude: ${item.lon}Â°`
  // Covert timestamp to readable date strings: 
  const dateString = new Date(item.timestamp).toLocalString();
  date.textContent = `Date: ${dateString}`;

  // specify the hierarchy position of the three div elements
  root.append(geo, date);
  document.body.append(root);
};
</code></pre>
:ET