I"ÿ<h2 id="method-and-object">Method and object</h2>

<p>A method is basically a function that is associated with an object. It always comes along with parenthesis, for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(s.toUpperCase());
</code></pre></div></div>

<h2 id="simple-methods">Simple Methods</h2>

<h3 id="touppercase">toUpperCase</h3>

<p>Convert a string into upper cases</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const s = 'Hello World';

console.log(s.toUpperCase());
</code></pre></div></div>

<h3 id="tolowercase">toLowerCase</h3>

<p>Convert a string a lower cases</p>

<h3 id="substring">substring</h3>

<p>Get part from a string. Define parameters to specify the starting and the ending positions.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const s = 'Hello World!'
console.log(s.substring(0, 5));
</code></pre></div></div>

<h3 id="split">split</h3>

<p>Split a string to several parts.</p>

<p>The following example doesnâ€™t really define the parameter. By default, the string is splitted into letters.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const s = 'Hello World!'
console.log(s.split(''));
</code></pre></div></div>

<p>Handy use case: Convert a tag list into an array:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const = `technology, computers, it, code`
// Imposes splits when a comma is detected
console.log(tags.split(', '))
</code></pre></div></div>

<h3 id="push">push</h3>

<p>Add a value to an array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const fruits = ['apples', 'oranges', 'pears'];
fruits.push('mangos')
console.log(fruits);
</code></pre></div></div>

<p>This operation works better than the working on <a href="#variables">const</a> alone since you donâ€™t have to necessarily figure out the count of elements within the target array.</p>

<h3 id="unshift">unshift</h3>

<p>Add a value to the beginning of an array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const fruits = ['apples', 'oranges', 'pears'];
fruits.unshift('strawberries')
console.log(fruits);
</code></pre></div></div>

<h3 id="pop">pop</h3>

<p>Take the last one off an array.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fruits.pop();
</code></pre></div></div>

<h3 id="isarray">isArray</h3>

<p>Check to see if something is an array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(array.isArray(fruits));
</code></pre></div></div>

<h3 id="indexof">indexOf</h3>

<p>Check out the index of an elements within the array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(fruits.indexOf('oranges'));
</code></pre></div></div>

<h3 id="method-jsonstringify">Method: JSON.stringify()</h3>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">JSON.stringify()</code> method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.</p>
</blockquote>

<h2 id="nesting-methods">Nesting Methods</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const s = 'Hello World!'
console.log(s.substring(0, 5).toUpperCase());
</code></pre></div></div>
:ET