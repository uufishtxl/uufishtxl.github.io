I"ñ*<p>This is based on Traversy Media‚Äôs video tutorial on <strong>MongoDB Crash Course 2019</strong>.</p>

<p><a href="https://gist.github.com/bradtraversy/f407d642bdc3b31681bc7e56d95485b6">MongoDB cheet sheet</a></p>

<h2 id="resource">Resource</h2>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/-56x56UppqQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<h2 id="nosql">NoSqL</h2>

<p>NoSql stands for ‚Äúnot only SQL‚Äù, is an alternative to traditional relational databases (<em>ÂÖ≥Á≥ªÊï∞ÊçÆÂ∫ì</em>) in which data is placed in tables and data schema is carefully designed before the database is built.</p>

<h2 id="mongo-shell-and-compass">Mongo shell and Compass</h2>

<ul>
  <li>Compass, a GUI application</li>
  <li>Mongo shell: Go to <code class="language-plaintext highlighter-rouge">C:\Program Files\MongoDB\Server\4.2\bin\mongo.exe</code> to run an executable. The command prompt appears afterwards, running Mongo.</li>
</ul>

<h2 id="mongodb-shell-commands">MongoDB Shell Commands</h2>

<h3 id="show-all-databases">Show all databases</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>show dbs
</code></pre></div></div>

<h3 id="accesscreate-a-database">Access/Create a database</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use dbname
</code></pre></div></div>

<p>If the database does not exist, it will create one. However, <code class="language-plaintext highlighter-rouge">show dbs</code> does not display a blank database.</p>

<h3 id="show-collections">Show collections</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>show collections
</code></pre></div></div>

<h3 id="drop-a-database">Drop a database</h3>

<p>Use the database and type the command line below.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.dropDatabase()
</code></pre></div></div>

<h3 id="show-the-current-database">Show the current database</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db
</code></pre></div></div>

<h3 id="create-a-collection">Create a collection</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.createCollection('posts')
</code></pre></div></div>

<h3 id="show-collections-1">Show collections</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>show collections
</code></pre></div></div>

<h3 id="insert-data">Insert data</h3>

<p>Data, documents, rows and records can be used interchangeably in a MongoDB context.</p>

<h4 id="insert-one-row">Insert one row</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.collectionName.insert()
</code></pre></div></div>

<p>For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.insert({
    title: 'Post One',
    body: 'Body of post one',
    category: 'News',
    like: 4,
    tags: ['news', 'events'],
    user: {
        name: 'John Doe',
        status: 'author'
    },
    date: Date()
})
</code></pre></div></div>

<h4 id="insert-many-rows">Insert many rows</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.collectionName.insertMany()
</code></pre></div></div>

<p>For example,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.insertMany([
    {
        title: 'Post Two',
        body: 'Body of post two',
        category: 'Technology',
        date: Date()
    },
    {
        title: 'Post Three',
        body: 'Body of post three',
        category: 'News',
        date: Date()
    },
    {
        title: 'Post Four',
        body: 'Body of post four',
        category: 'Entertainment',
        date: Date()
    }
])
</code></pre></div></div>

<p>Note that in this array, we don‚Äôt have information about the tags or the user. This is okay since unlike relational database,  MongoDB doesn‚Äôt have that strict data model that we have to follow.</p>

<h3 id="query-the-data">Query the data</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.collectionName.find()
</code></pre></div></div>

<h4 id="prettify-the-data">Prettify the data</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.collectionName.find().pretty()
</code></pre></div></div>

<h4 id="narrow-down">Narrow-down</h4>

<p>Add something like a where clause.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.collectionName.find({ category: 'News' }).pretty()
</code></pre></div></div>

<h4 id="sort-the-results">Sort the results</h4>

<p>1 for ascending, negative 1 for descending.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.collectionName.find().sort({ title: 1 }).pretty()
</code></pre></div></div>

<h4 id="count-documents">Count documents</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.collectionName.find({ category: 'News' }).count()
</code></pre></div></div>

<h4 id="limit-the-results-shown">Limit the results shown</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.find().limit(2)
</code></pre></div></div>

<p>Sort and limit:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.find().sort({ title: -1 }).limit(2)
</code></pre></div></div>

<h4 id="for-each-loop">For each loop</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.find().forEach(function(doc) {print('Blog post: ' + doc.title) })
</code></pre></div></div>

<h4 id="find-one-particular-result">Find one particular result</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.findOne({ category: 'News'})
</code></pre></div></div>

<p>It should just return the first one.</p>

<h4 id="update-data">Update data</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.collectionName.update()
</code></pre></div></div>

<p>You may pass in three parameters. The first one for the query condition, the second the updates, the last <code class="language-plaintext highlighter-rouge">upsert</code>, purposed for telling the system that when the result is not found, just insert it.</p>

<p>This method just replaces everything. That‚Äôs why typing the following command erases the old category information.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.update({ title: 'Post Two' }, 
    {
        title: 'Post Two',
        body: 'New post 2 body',
        date: Date()
    },
    {
        upsert: true
    }
)
</code></pre></div></div>

<p>If you want to keep the missing attributes in your update intact, opt to enclose your update within a <code class="language-plaintext highlighter-rouge">$set</code> operator.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.update({ title: 'Post Two' }, 
    {
        $set: {
            body: 'Body of post 2',
            category: 'Technology'
        }
    }
)
</code></pre></div></div>

<h4 id="increment-operator">Increment operator</h4>

<p>Use the <code class="language-plaintext highlighter-rouge">$inc</code> operator.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.update({ title: 'Post One'},
    { $inc: {likes: 2}}
)
</code></pre></div></div>

<h4 id="rename-a-field">Rename a field</h4>

<p>Use the <code class="language-plaintext highlighter-rouge">$rename</code> operator.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.update({ title: 'Post One'},
    {$rename: {likes: 'views'}}
)
</code></pre></div></div>

<h4 id="remove-a-record">Remove a record</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.remove({ title: 'Post Four'})
</code></pre></div></div>

<h4 id="sub-documenting">Sub-documenting</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.update({ title: 'Post One' },
    {
       $set: {
           comments: [
               {
                   user: 'Mary Williams',
                   body: 'Comment One',
                   date: Date()
               },
               {
                user: 'Harry White',
                body: 'Comment Two',
                date: Date()
            }
           ]
       } 
    }
)
</code></pre></div></div>

<h4 id="find-by-element-in-array-elemmatch">Find by element in array ($elemMatch)</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.find({
    comments: {
        $elemMatch: {
            user: 'Mary Williams'
        }
    }
})
</code></pre></div></div>

<h4 id="add-indexes">Add indexes</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.createIndex({ title: 'text'})
</code></pre></div></div>

<h4 id="text-search">Text search</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.find({
    $text: {
        $search: "\"Post O\""
    }
})
</code></pre></div></div>

<h3 id="greater-than--less-than">Greater than &amp; less than</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>db.posts.find({
    views: {
        $gt: 3
    }
})
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">$gte</code> = greater than or equal to</p>

<p><code class="language-plaintext highlighter-rouge">$lt</code> = less than</p>

<p><code class="language-plaintext highlighter-rouge">$lte</code> = less than or equal to</p>

<h2 id="terminilogy">Terminilogy</h2>

<table>
  <tbody>
    <tr>
      <td>collection</td>
      <td>similar to a table, holds documents of data</td>
    </tr>
    <tr>
      <td>document</td>
      <td>similar to an object</td>
    </tr>
  </tbody>
</table>
:ET