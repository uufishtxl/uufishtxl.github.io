I"ù<p>This is based on Daniel Shiffmanâ€™s video tutorial on <strong>Working with Data and APIs in JavaScript</strong>.</p>

<h2 id="resource">Resource</h2>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/RfMkdvN-23o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<h2 id="purpose">Purpose</h2>

<p>Fetch a local csv file and make a graph.</p>

<h3 id="step-1-load-a-local-csv-file">Step 1: Load a local CSV file</h3>

<ol>
  <li>Review the source CSV file and clear all the mistakes and empty rows and columns.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">fetch()</code> to fetch its data.</li>
  <li>Complete the data stream.</li>
</ol>

<pre><code class="language-JavaScript">async function getData() {
  const response = await fetch(`ZonAnn.Ts+dSST.csv`);
  const table = await response.text();
}
</code></pre>

<h3 id="step-2-manual-parsing">Step 2: Manual parsing</h3>

<ol>
  <li>Split the data to rows based on line breaks.</li>
  <li>Get rid of the header row.</li>
  <li>Loop through the rows to get years and temperatures out of the data.</li>
  <li>Push the years into the array of X-axis data, the temps the array of Y-axix data.</li>
  <li>Remember that in spreadsheets, numbers are expressed as strings. So you have to convert them to numbers using the <code class="language-plaintext highlighter-rouge">parseFloat()</code> method.</li>
</ol>

<pre><code class="language-JavaScript">async function getData() {
  const xs = [];
  const ys = [];
  const response = await fetch('ZonAnn.Ts+dSST.csv');
  const data = await response.text();
  const table = data.split(/\n/).slice(1);
  table.forEach(row =&gt; {
    const columns = row.split(',');
    const year = columns[0];
    xs.push(year);
    const temp = columns[1];
    ys.push(parseFloat(temp) + 14);
  })
}
</code></pre>

<h3 id="step-3-chartjs">Step 3: chart.js</h3>

<ol>
  <li>Summon up the getting started tutorial of <code class="language-plaintext highlighter-rouge">chart.js</code>.</li>
  <li>Copy and paste the example as below on your page.
    <pre><code class="language-JavaScript">&lt;canvas id="myChart" width="400" height="400"&gt;&lt;/canvas&gt;
&lt;script&gt;
var ctx = document.getElementById('myChart').getContext('2d');
var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
        datasets: [{
            label: '# of Votes',
            data: [12, 19, 3, 5, 2, 3],
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    },
    options: {
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});
&lt;/script&gt;
</code></pre>
  </li>
  <li>Configure data source.<br />
In our case, the years should be X-axis labels while the temps Y-axis data. Enable the <code class="language-plaintext highlighter-rouge">getData()</code> function to return an object literal representing a pair of the desired data. By doing so, we are able to quote such data by using dot notation.
    <pre><code class="language-JavaScript">async function getData() {
  const xs = [];
  const ys = [];
  const response = await fetch('ZonAnn.Ts+dSST.csv');
  const data = await response.text();
  const table = data.split(/\n/).slice(1);
  table.forEach(row =&gt; {
    const columns = row.split(',');
    const year = columns[0];
    xs.push(year);
    const temp = columns[1];
    ys.push(parseFloat(temp) + 14);
  })
  return { xs, ys }
}
</code></pre>
  </li>
  <li>Organize the <code class="language-plaintext highlighter-rouge">chart.js</code> related code lines into a function.
    <pre><code class="language-JavaScript">async function chartIt() { // Organize the `chart.js` related code line into a function
      const data = await getData(); // Get resulting data from the getData() function.
      const ctx = document.getElementById('myChart').getContext('2d');
      const myChart = new Chart(ctx, {
          type: 'line', // Switch the graph to a line chart
          data: {
              labels: data.xs, // Customize the label sources
              datasets: [{
                  label: 'Combined Land-Surface Air and Sea-Surface Water Temperature (â„ƒ)', // new name
                  data: data.ys, // Customize the data source for the Y-axis
                  fill: false, // Do not fill the line
                  backgroundColor: 'rgba(255, 99, 132, 0.2)', // Adopt single color scheme across different datasets
                  borderColor: 'rgba(255, 99, 132, 1)', // adopt single color scheme across different datasets
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  yAxes: [{
                      ticks: {
                          // Include a â„ƒ sign in the ticks
                          callback: function(value, index, values) {
                              return value + 'â„ƒ';
                          }
                      }
                  }]
              }
          }
      });
  }
</code></pre>
  </li>
  <li>Call the <code class="language-plaintext highlighter-rouge">chartIt()</code> function.</li>
</ol>
:ET