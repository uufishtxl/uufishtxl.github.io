I"[<h2 id="the-window-object">The <code class="language-plaintext highlighter-rouge">window</code> object</h2>

<p>The window object is the parent object of the browser. As the top-level object, you may omit it while implementing dom trees.</p>

<p>For instance, you donâ€™t necessarily write <code class="language-plaintext highlighter-rouge">window.alert('This is a message!)</code>. Just put it like this, <code class="language-plaintext highlighter-rouge">alert('This is a message)</code>.</p>

<h2 id="query-selectors">Query selectors</h2>

<ul>
  <li>getElementById(): Still in use</li>
  <li>getElementsByClassName(): Depreciated</li>
  <li>getElementsByTagName(): Depreciated</li>
  <li>Query selectors:
    <ul>
      <li>querySelector(): single selector, means it simply selects the first match</li>
      <li>querySelectorAll(): most recommended
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(document.querySelectorAll('.item'));
// equals to console.log(document.getElementsByClassName('item'));
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">querySelector</code> and <code class="language-plaintext highlighter-rouge">querySelectorAll</code> works much like JQuery. <code class="language-plaintext highlighter-rouge">querySelector</code> is a single selector while <code class="language-plaintext highlighter-rouge">querySelectorAll</code> gives a node list which is quite similar to an array.</p>

<h3 id="loop-through">Loop Through</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Gives a node list
const items = document.querySelectorAll('.items');

// loop through the node list
items.forEach((item) =&gt; console.log('item'));
</code></pre></div></div>
:ET