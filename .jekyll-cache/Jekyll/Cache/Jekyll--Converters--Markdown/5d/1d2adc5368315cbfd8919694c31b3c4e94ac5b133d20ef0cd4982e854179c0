I"¦F<h2 id="resources">Resources</h2>

<h3 id="video-tutorial-javascript-crash-course">Video tutorial: JavaScript Crash Course</h3>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/hdI2bqOjy3c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<h2 id="variables">Variables</h2>

<h3 id="var-let-and-const"><code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">const</code></h3>

<p>In JavaScript, thereâ€™re basically three ways to set variables. We have <code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">const</code>.</p>

<p><code class="language-plaintext highlighter-rouge">var</code> comes into view from the beginning of JavaScript. But you wonâ€™t really want to use it anymore now that weâ€™ve got <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">const</code>, because <code class="language-plaintext highlighter-rouge">var</code> is globally scoped, while <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">const</code> has block-level scopes.</p>

<p>With <code class="language-plaintext highlighter-rouge">let</code>, you can reassign values. <code class="language-plaintext highlighter-rouge">const</code> stands for constant, which means its value cannot be reassigned.</p>

<p>Using <code class="language-plaintext highlighter-rouge">const</code> allows you to add values to arrays. You can manipulate it, you can use methods on it. The only thing you canâ€™t do is to take the array and reassign it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const fruits = ['apples', 'oranges', 'pears']
fruits[3] = 'grapes';
console.log(fruits);
</code></pre></div></div>

<p>The console prints out grapes as well. This, however, is not the best practice to add a value into an array. See <a href="#push">push</a> for a more refined solution.</p>

<p>Only use <code class="language-plaintext highlighter-rouge">const</code> unless you know youâ€™re going to reassign the value.</p>

<h2 id="simplified-concatenation">Simplified concatenation</h2>

<p>Traditional way of concatenation:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const name = 'John';
const age = 30;
console.log('my name is ' + name + ',' + ' and my age is ' + age);
</code></pre></div></div>

<h3 id="template-strings">Template strings</h3>

<blockquote>
  <p>Template literals are string literals allowing embedded expression.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const name = 'John';
const age = 30;
// Start your variable with a dollar sign and surround its name within curly braces.
const hello = `My name is ${name} and I am ${age}.`;
console.log(hello);
</code></pre></div></div>

<h2 id="methods">Methods</h2>

<h3 id="method-and-object">Method and object</h3>

<p>A method is basically a function that is associated with an object. It always comes along with parenthesis, for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(s.toUpperCase());
</code></pre></div></div>

<h3 id="simple-methods">Simple Methods</h3>

<h4 id="touppercase">toUpperCase</h4>

<p>Convert a string into upper cases</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const s = 'Hello World';

console.log(s.toUpperCase());
</code></pre></div></div>

<h4 id="tolowercase">toLowerCase</h4>

<p>Convert a string a lower cases</p>

<h4 id="substring">substring</h4>

<p>Get part from a string. Define parameters to specify the starting and the ending positions.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const s = 'Hello World!'
console.log(s.substring(0, 5));
</code></pre></div></div>

<h4 id="split">split</h4>

<p>Split a string to several parts.</p>

<p>The following example doesnâ€™t really define the parameter. By default, the string is splitted into letters.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const s = 'Hello World!'
console.log(s.split(''));
</code></pre></div></div>

<p>Handy use case: Convert a tag list into an array:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const = `technology, computers, it, code`
// Imposes splits when a comma is detected
console.log(tags.split(', '))
</code></pre></div></div>

<h4 id="push">push</h4>

<p>Add a value to an array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const fruits = ['apples', 'oranges', 'pears'];
fruits.push('mangos')
console.log(fruits);
</code></pre></div></div>

<p>This operation works better than the working on <a href="#variables">const</a> alone since you donâ€™t have to necessarily figure out the count of elements within the target array.</p>

<h4 id="unshift">unshift</h4>

<p>Add a value to the beginning of an array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const fruits = ['apples', 'oranges', 'pears'];
fruits.unshift('strawberries')
console.log(fruits);
</code></pre></div></div>

<h4 id="pop">pop</h4>

<p>Take the last one off an array.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fruits.pop();
</code></pre></div></div>

<h4 id="isarray">isArray</h4>

<p>Check to see if something is an array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(array.isArray(fruits));
</code></pre></div></div>

<h4 id="indexof">indexOf</h4>

<p>Check out the index of an elements within the array.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(fruits.indexOf('oranges'));
</code></pre></div></div>

<h4 id="method-jsonstringify">Method: JSON.stringify()</h4>

<blockquote>
  <p>The <code class="language-plaintext highlighter-rouge">JSON.stringify()</code> method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.</p>
</blockquote>

<h3 id="nesting-methods">Nesting Methods</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const s = 'Hello World!'
console.log(s.substring(0, 5).toUpperCase());
</code></pre></div></div>

<h2 id="object-literals">Object literals</h2>

<blockquote>
  <p>A JavaScript object literal is a comma-separated list of name-value pairs wrapped in curly braces.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const person = {
    firstName: 'John',
    lastName: 'Doe',
    age: 30,
    hobbies: ['music', 'movies', 'sports'],
    address: {
        steet: '50 main st',
        city: 'Boston',
        state: 'MA'
    }
}
</code></pre></div></div>

<h3 id="extracting-data---approach-a">Extracting data - Approach A</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>console.log(person.hobbies[1]);
</code></pre></div></div>

<h3 id="extracting-data---es6-destructuring-assignment-è§£æž„èµ‹å€¼">Extracting data - ES6 Destructuring assignment (è§£æž„èµ‹å€¼)</h3>

<blockquote>
  <p>Destructuring assignment is a cool feature that came along with ES6. Destructuring is a JavaScript expression that makes it possible to <strong>unpack</strong> values from arrays, or properties from objects, <strong>into distinct variables</strong>. ES6 destructuring assignment makes it easier to extract this data.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const { firstName, lastName, address: { city } } = person;
console.log(city);
</code></pre></div></div>

<h3 id="adding-data-into-an-object-literal">Adding data into an object literal</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>person = {
  ...
}

person.email = 'johndoe@email.com'

console.log(person);
</code></pre></div></div>

<p>The printout also includes the email address.</p>

<h3 id="array-literal">Array literal</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const todos = [
    {
        id: 1,
        text: 'Take out of trash',
        isCompleted: true
    },
    {
        id: 2,
        text: 'Meeting with boss',
        isCompleted: true
    },
    {
        id: 3,
        text: 'Dentist appt',
        isCompleted: false
    }
];
</code></pre></div></div>

<h2 id="looping">Looping</h2>

<h3 id="for-loop">For loop</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for(let i = 0; i &lt; 10; i++) {
  console.log(`For Loop Number: ${i}`);
}
</code></pre></div></div>

<h3 id="while-loop">While loop</h3>

<p>While looping sets the variables outside of the loops.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let i = 0;
while(i &lt; 10) {
  console.log(`While Loop Number: ${i}`);
  i++;
}
</code></pre></div></div>

<h3 id="loop-through-an-array">Loop through an array</h3>

<h4 id="traditonal-practice">Traditonal practice</h4>

<p>A traditonal way to do this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for(let i = 0; i &lt; todos.length; i++) {
    console.log(todos[i].text);
}

</code></pre></div></div>

<h4 id="a-much-more-readable-solution">A much more readable solution</h4>

<p>Nonetheless, thereâ€™s a much more readable solution.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 'todo' is just a name. Name it anything you like
for(let todo of todos){
  console.log(todo.text);
}
</code></pre></div></div>

<p>See? Dropping the <code class="language-plaintext highlighter-rouge">i</code> variable, this expression is way more graceful.</p>

<h4 id="high-order-array-methods">High order array methods</h4>

<p>Recommended for any kind of itemration with arrays.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">forEach()</code> <strong>calls a provided <code class="language-plaintext highlighter-rouge">callback</code> function once for each element in any array</strong> in ascending order. It is not invoked for index properties that have been deleted or are uninitialized (i.e. on sparse arrays).</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>todos.forEach(function(todo) {
    console.log(todo.text);
});
</code></pre></div></div>

<blockquote>
  <p>The map() method creates a new array with the results of calling a provided function on every element in the calling array.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var array1 = [1, 4, 9, 16];

// pass a function to map
const map1 = array1.map(x =&gt; x * 2);

console.log(map1);
// expected output: Array [2, 8, 18, 32]
</code></pre></div>  </div>
</blockquote>

<p>With map method, it returns an array. Here, we like to loop through the array literal and return an array of just the text values.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const todoText = todos.filter(function(todo) {
    return todo.text;
});

console.log(todoText);
</code></pre></div></div>

<p>Wield the <code class="language-plaintext highlighter-rouge">filter()</code> method to extract completed tasks:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const todoCompleted = todos.filter(function(todo) {
    return todo.isCompleted === true;
});

console.log(todoCompleted);
</code></pre></div></div>

<p>Employ the <code class="language-plaintext highlighter-rouge">map()</code> method in conjection with the <code class="language-plaintext highlighter-rouge">filter()</code> method to list the title of all completed tasks:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const todoCompletedText = todos.filter(function(todo) {
    return todo.isCompleted === true;
}).map(function(todo) {
    return todo.text;
});

console.log(todoCompletedText);
</code></pre></div></div>

<h2 id="equals">Equals</h2>

<p>Double equal: check the string merely, regardless of its data type.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const x = '10';
if(x == 10) {
  console.log('x is 10')
}
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const x = 10;
if(x == 10) {
  console.log('x is 10`)
}
</code></pre></div></div>

<p>They both fit into the true scenario.</p>

<p>Triple equal is much more strict. It takes the data type into account as well. So, in this case, <code class="language-plaintext highlighter-rouge">x = '10'</code> does not match the true statement.</p>

<h2 id="condition">Condition</h2>

<h3 id="if-statement">if statement</h3>

<h4 id="-is-or"><code class="language-plaintext highlighter-rouge">||</code>: is or</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const x = 6;
const y = 11;
if(x &gt; 5 || y &gt; 10) {
console.log('x is more than 5 or y is greater than 10');
};
</code></pre></div></div>

<h4 id="-is-and"><code class="language-plaintext highlighter-rouge">&amp;&amp;</code>: is and</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const x = 6;
const y = 11;
if(x &gt; 5 &amp;&amp; y &gt; 10) {
    console.log('x is more than 5 and y is greater than 10');
}
</code></pre></div></div>

<p>This is much more efficient than nesting if statements within another if expression.</p>

<h4 id="-is-then--else"><code class="language-plaintext highlighter-rouge">?</code> is then, <code class="language-plaintext highlighter-rouge">:</code> else</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const x = 10;

const color = x &gt; 10 ? 'red' : 'blue';

console.log(color)
</code></pre></div></div>

<h3 id="switches">Switches</h3>

<p>Route judgment into different directions (cases) and thus produce disparate results.</p>

<p>keywords: <code class="language-plaintext highlighter-rouge">case</code>, <code class="language-plaintext highlighter-rouge">break</code>, <code class="language-plaintext highlighter-rouge">default</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const x = 10;

const color = x &gt; 10 ? 'red' : 'blue';

switch(color) {
    case 'red':
        console.log('color is red');
        break;
    case 'blue':
        console.log('color is blue');
        break;
    default: 
        console.log('color is not red or blue');
}
</code></pre></div></div>

<h2 id="arrow-functions">Arrow functions</h2>

<p>In the old days, we define a function like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function addNums(num1, num2){
  console.log(num1 + num2);
}
// expected printout: NaN, means not a number, given that we didn't specify the values
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function addNums(num1 = 1, num2 = 1){
  console.log(num1 + num2);
}
// expected printout: 2; the function takes in the default values
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function addNums (num1 = 1, num2 = 1) {
    return num1 + num2;
}

console.log(addNums(5,5));
// expected printout: 10
</code></pre></div></div>

<h3 id="let-arrow-funtion-come-into-play">Let arrow funtion come into play</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const addNums = (num1 = 1, num2 = 1) =&gt; {
    return num1 + num2;
}
console.log(addNums(5,5));
</code></pre></div></div>

<p>It works, but you donâ€™t necessarily have to include the curly braces. Make it simple like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const addNums = (num1 = 1, num2 = 1) =&gt; console.log(num1 + num2);

addNums(5,5)
</code></pre></div></div>

<p>If you want to return the result, you donâ€™t even need the return keyword.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const addNums = (num1 = 1, num2 = 1) =&gt; num1 + num2;
console.log(addNums(5,5));
</code></pre></div></div>

<h2 id="termiology">Termiology</h2>

<table>
  <tbody>
    <tr>
      <td>Term</td>
      <td>Explanation</td>
      <td>Example</td>
    </tr>
    <tr>
      <td>High-level</td>
      <td>thereâ€™s a lot of abstraction</td>
      <td>JavaScript is a high-level, interpreted programming language.</td>
    </tr>
  </tbody>
</table>
:ET