I"|<p><code class="language-plaintext highlighter-rouge">v-model</code> 指令：用于在表类元素上双向绑定数据。比方说，在输入框上使用时，输入的内容会实时映射到<strong>绑定的数据</strong>上。</p>

<ul>
  <li>使用<code class="language-plaintext highlighter-rouge">v-model</code>后，表单控件显示的值只依赖所绑定的数据，不再关心初始化时的<code class="language-plaintext highlighter-rouge">value</code>属性，对于在<code class="language-plaintext highlighter-rouge">&lt;textarea&gt;&lt;/textarea&gt;</code>中插入的值，也不会生效</li>
  <li>输入中文时，在输入拼音阶段不会触发更新。如果想要这么做的话，可以用@input来替换<code class="language-plaintext highlighter-rouge">v-model</code></li>
  <li><code class="language-plaintext highlighter-rouge">v-model</code>是一个特殊的语法糖，只不过会在不同的表单上进行智能化的处理</li>
</ul>

<p><a href="https://jsfiddle.net/edith_tang/qnLfv70p/68/">基本知识、单选按钮和复选框的相关示例</a></p>

<h2 id="单选按钮">单选按钮</h2>

<ul>
  <li>
    <p>单独使用：不需要使用<code class="language-plaintext highlighter-rouge">v-model</code>，直接绑定一个布尔类型的值即可。（<strong><em>问题</em></strong>：这个修改选中状态还要另外绑定方法？好像是只能从未选中变成选中的状态，然后就不可逆了）</p>
  </li>
  <li>
    <p>互相排斥的一组单选按钮：需要使用<code class="language-plaintext highlighter-rouge">v-model</code>配合<code class="language-plaintext highlighter-rouge">value</code>来使用。一旦选中，v-model绑定的数据的指就会变成选中选项的<code class="language-plaintext highlighter-rouge">value</code>属性。</p>
  </li>
</ul>

<p><a href="https://jsfiddle.net/edith_tang/qnLfv70p/68/">基本知识、单选按钮和复选框的相关示例</a></p>

<h2 id="复选框">复选框</h2>

<ul>
  <li>
    <p>单独使用：</p>
  </li>
  <li>
    <p>组合使用：将多个<code class="language-plaintext highlighter-rouge">checkbox</code>使用<code class="language-plaintext highlighter-rouge">v-model</code>绑定到同一个<code class="language-plaintext highlighter-rouge">Array</code>类型的数据。当某个复选框的<code class="language-plaintext highlighter-rouge">checked</code>状态为<code class="language-plaintext highlighter-rouge">true</code>时，它的<code class="language-plaintext highlighter-rouge">value</code>属性值就会被<code class="language-plaintext highlighter-rouge">push</code>到这个数组中。</p>
  </li>
</ul>

<p><a href="https://jsfiddle.net/edith_tang/qnLfv70p/68/">基本知识、单选按钮和复选框的相关示例</a></p>

<h2 id="选择列表">选择列表</h2>

<p><a href="https://jsfiddle.net/edith_tang/wrv2dmtp/32/">选择列表相关示例</a></p>

<p>选择列表，也就是下拉选择器。</p>

<h3 id="单选场景">单选场景</h3>

<p>单选的场景：</p>

<ol>
  <li>
    <p>v-model绑定一个String类型的数据</p>
  </li>
  <li>
    <p>选中后，会优先匹配选中项的value值，如果没有value值，则会去匹配option的text。</p>
  </li>
  <li>
    <p>会在初始化后忽视option本身的selected属性</p>
  </li>
  <li>
    <p>当绑定的数据的初始值就是某个选项的value值时，初始化后会默认选中改选项</p>
  </li>
</ol>

<h3 id="多选场景">多选场景</h3>

<p>选择列表多选的场景：</p>

<ol>
  <li>
    <p>在<code class="language-plaintext highlighter-rouge">&lt;select&gt;</code>标签上添加<code class="language-plaintext highlighter-rouge">multiple</code>属性，即可变成多选列表</p>
  </li>
  <li>
    <p>和复选框一样，用<code class="language-plaintext highlighter-rouge">v-model</code>会绑定一个Array类型的数据</p>
  </li>
  <li>
    <p>选中选项会，会将它匹配（优先匹配<code class="language-plaintext highlighter-rouge">value</code>，次则<code class="language-plaintext highlighter-rouge">&lt;option&gt;</code>的text）并push到Array数据中</p>
  </li>
</ol>

<h3 id="利用data和v-for来对options元素进行渲染">利用<code class="language-plaintext highlighter-rouge">data</code>和<code class="language-plaintext highlighter-rouge">v-for</code>来对<code class="language-plaintext highlighter-rouge">&lt;options&gt;</code>元素进行渲染</h3>

<ol>
  <li>
    <p>在业务中，<code class="language-plaintext highlighter-rouge">&lt;option&gt;</code>经常用<code class="language-plaintext highlighter-rouge">v-for</code>动态输出，value和text也是用v-bind来动态输出的</p>
  </li>
  <li>
    <p>虽然在<code class="language-plaintext highlighter-rouge">&lt;select&gt;</code>中可以简单地完成下拉选择需求，但是在实际业务中反而不常用。因为它的样式依赖平台和浏览器，无法统一，也不美观，功能也受限（比如，不支持搜索），所以常见的解决方案是用<code class="language-plaintext highlighter-rouge">&lt;div&gt;</code>模拟一个类似的控件。具体可以在学习了组件（components）的内容后再进行尝试。</p>
  </li>
</ol>

<h2 id="自定义组件">自定义组件</h2>

<p>从 Vue.js 2.x 开始，<code class="language-plaintext highlighter-rouge">v-model</code>还可以用于自定义组件，满足定制化需求，在后面章节开始介绍。</p>
:ET