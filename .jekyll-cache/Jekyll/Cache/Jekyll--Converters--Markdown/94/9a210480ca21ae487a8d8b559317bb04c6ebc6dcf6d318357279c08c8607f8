I"$<p>什么时候需要用到 slot？</p>

<p><em>When to use <code class="language-plaintext highlighter-rouge">slot</code>?</em></p>

<p>当需要混合使用父组件内容和子组件模板时，就会用到 slot。这个过程叫作<strong>内容发布 (<b data-toggle="tooltip" data-original-title=""><code class="language-plaintext highlighter-rouge">transclusion</code></b>)</strong>。有两个特点：</p>

<p><em><code class="language-plaintext highlighter-rouge">slot</code> is a handy touch when a father component should accommodate content of its own and child component templates in promiscuity</em>. Such process is called <strong><em>transclusion</em></strong>. You should note its two features as below:</p>

<ul>
  <li>
    <p>The father component, say, <code class="language-plaintext highlighter-rouge">&lt;app&gt;</code>, has no clue as to what content would be mounted in it. The decision is his father’s.</p>
  </li>
  <li>
    <p>Chances are <code class="language-plaintext highlighter-rouge">&lt;app&gt;</code> has its own template as well.</p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">&lt;slot&gt;</code> element serving as distribution outlets for content.</p>

<h2 id="about-compilation-scope">About Compilation Scope</h2>

<p><code class="language-plaintext highlighter-rouge">slot</code> has access to the same instance properties, that is to say, the same “scope” as the rest of the template. That it to say, The slot in <code class="language-plaintext highlighter-rouge">&lt;app&gt;</code> does not have access to <code class="language-plaintext highlighter-rouge">&lt;my-component&gt;</code>’s scope.</p>

<h2 id="slot-的用法"><code class="language-plaintext highlighter-rouge">slot</code> 的用法</h2>

<p>可以在子组件开启一个插槽 (<code class="language-plaintext highlighter-rouge">slot</code>)。在父组件模板里，插入在子组件标签内的所有内容将替代子组件<code class="language-plaintext highlighter-rouge">&lt;slot&gt;标签及它的内容</code>。在父组件没有<code class="language-plaintext highlighter-rouge">slot</code>时，则会渲染子组件中<code class="language-plaintext highlighter-rouge">&lt;slot&gt;</code>中的内容。</p>

<p><a href="https://jsfiddle.net/edith_tang/n4yxokrt/2/">范例</a></p>

<h3 id="具名-slot--named-slots">具名 <code class="language-plaintext highlighter-rouge">Slot</code> | Named slots</h3>

<p>可能会需要多个 <code class="language-plaintext highlighter-rouge">Slot</code>，这时候可以给<code class="language-plaintext highlighter-rouge">&lt;slot&gt;</code>元素指定<code class="language-plaintext highlighter-rouge">name</code>属性，就可以分发多个内容。具名Slot可以和单个Slot共存。</p>

<p>打个比方，我在子组件上开了很多槽口，并且留了一个没有命名，其它都给了名字。然后我在父组件上定义元素的时，会在上面标明<code class="language-plaintext highlighter-rouge">slot</code>属性，也就是槽的名字，那这个元素就会被放到相应的槽口里面去进行渲染。</p>

<p>那那些没有<code class="language-plaintext highlighter-rouge">&lt;slot&gt;</code>属性的元素和内容就会被统一归类到默认的槽中。</p>

<p>如果没有默认的开槽，就直接将它们丢弃。</p>

<h3 id="作用域插槽">作用域插槽</h3>

<p><a href="https://codepen.io/uufishtxl/pen/abdEVar">范例</a></p>

<p>子组件的插槽上用类似props的写法绑定了数据。父组件使用<code class="language-plaintext highlighter-rouge">&lt;template&gt;</code>元素，而且拥有一个<code class="language-plaintext highlighter-rouge">scope="props</code>的特性，这里的<code class="language-plaintext highlighter-rouge">props</code>只是一个临时变量，就和<code class="language-plaintext highlighter-rouge">v-for="item in items"</code>中的<code class="language-plaintext highlighter-rouge">item</code>一样。这样，<template>标签就能通过临时变量`props`来访问子组件插槽的数据`msg`。</template></p>

<p>作用域插槽更具代表性的用例是列表组件。但是书中的例子显得多此一举，不过例子只是为了示范如果使用作用域插槽。</p>

<p>作用域插槽的使用场景是既可以复用子组件的<code class="language-plaintext highlighter-rouge">slot</code>，又可以使<code class="language-plaintext highlighter-rouge">slot</code>的内容不一致。</p>

<p><a href="https://codepen.io/uufishtxl/pen/YzwYYKG">范例</a></p>

<p>分解步骤：</p>

<ol>
  <li>
    <p>将父组件的数据通过<code class="language-plaintext highlighter-rouge">props</code>传递给子组件。</p>
  </li>
  <li>
    <p>子组件在<code class="language-plaintext highlighter-rouge">props</code>选项中接收数据，并将它保存到一个自身的数据中。</p>
  </li>
  <li>
    <p>决定两个组件混用的元素，这里是<code class="language-plaintext highlighter-rouge">&lt;li&gt;</code>标签，所以在父组件中，在子组件的标签里插入<code class="language-plaintext highlighter-rouge">&lt;li name="tab" scope="props"&gt;&lt;/li&gt;</code>，这里，有几个注意点：</p>

    <p>a.  <code class="language-plaintext highlighter-rouge">name="tab"</code>指定目标插槽。<br />
b.  <code class="language-plaintext highlighter-rouge">scope="props"</code>中的<code class="language-plaintext highlighter-rouge">props</code>是一个临时变量，就和<code class="language-plaintext highlighter-rouge">v-for="item in items"</code>中的<code class="language-plaintext highlighter-rouge">item</code>一个道理。<br />
c.  <code class="language-plaintext highlighter-rouge">props.tabName</code>中的<code class="language-plaintext highlighter-rouge">tabName</code>还未定义，需要在子组件的<code class="language-plaintext highlighter-rouge">&lt;slot&gt;</code>中进行定义，作为props对象的属性。</p>
  </li>
  <li>
    <p>为了完成3-c步骤，需要在子组件的<code class="language-plaintext highlighter-rouge">&lt;slot&gt;</code>标签绑定自定义属性<code class="language-plaintext highlighter-rouge">&lt;slot v-for="tab in tabList" :tabName="tab.name"&gt;</code>。</p>
  </li>
</ol>

<h2 id="访问slot">访问<code class="language-plaintext highlighter-rouge">slot</code></h2>

<p>访问被<code class="language-plaintext highlighter-rouge">slot</code>分发的内容的方法<code class="language-plaintext highlighter-rouge">$slot</code>，请看示例。</p>

<p><code class="language-plaintext highlighter-rouge">$slot</code>在业务中几乎用不到，在用<code class="language-plaintext highlighter-rouge">render</code>函数创建组件时会比较有用。</p>

<div class="alert alert-info" role="alert"><i class="fa fa-info-circle"></i> <b>Note:</b> 书里的组件高级用法暂时跳过了</div>

:ET