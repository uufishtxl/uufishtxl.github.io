I"f<p>This is based on Daniel Shiffman’s video tutorial on <strong>Working with Data and APIs in JavaScript</strong>.</p>

<h2 id="resource">Resource</h2>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/wxbQP1LMZsw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<h2 id="purpose">Purpose</h2>

<p>Use Node.js to create a server locally on your computer for the sake of data persistence. Rather than merely fetching data on a client-based programming tool, you can even save data with Node.js.</p>

<h2 id="nodejs">Node.js</h2>

<blockquote>
  <p>Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine.</p>
</blockquote>

<p>With Node, you can write JavaScript without the browser. The code runs on your computer instead of on a browser.</p>

<h2 id="express-a-node-package">Express, a node package</h2>

<h3 id="what-is-node-package">What is node package?</h3>

<p>One of the ways that is very typical when working with Node is to find a package – a node package – that has some of the functionality you’re looking for. It’s like a library or add-on. Install the package and make use of its functionality.</p>

<h3 id="what-is-npm">What is npm?</h3>

<p>How do we access the node package known as Express? NPM stands for Node Package Manager. It’s a thing to manage all of your node packages. It comes along with Node.js. That is to say, you do not have to install it.</p>

<h3 id="packagejson">package.json</h3>

<p>To use NPM with this project, we need <code class="language-plaintext highlighter-rouge">package.json</code>. <code class="language-plaintext highlighter-rouge">package.json</code> is basically the configuration file for your project. This is where all the meta information about our project, such as what node packages we’re using, what our project is called.</p>

<p>To create a <code class="language-plaintext highlighter-rouge">package.json</code> file, of course you may just make a file called <code class="language-plaintext highlighter-rouge">package.json</code> and type stuff into it. However, there’s a nice command-line utilify from NPM itself to generate the file for you, making sure you don’t make wrong of it. Run this: <code class="language-plaintext highlighter-rouge">npm init</code>, and follow the screen instructions to configure the numerous things.</p>

<p>When you have finished and save the file, you are expected to find everything in there in a file called <code class="language-plaintext highlighter-rouge">package.json</code>. The reason why we need this <code class="language-plaintext highlighter-rouge">package.json</code> is in this file is where we need to make reference to Express. Now, you are ready to install Express.</p>

<h3 id="what-is-express">What is Express?</h3>

<p>A pretty minimal and simple framework for making web servers.</p>

<p>To install Expess, run this: <code class="language-plaintext highlighter-rouge">npm install express</code>.</p>

<p>When this finishes, two things are gonna happen. Number one is we’re going to see Express pop-up in <code class="language-plaintext highlighter-rouge">package.json</code> as one of the dependencies. The other thing is that we have a new folder called node_modules. Just leave it as-is. They are the numerous dependencies Express requires and you don’t actually need to manage it.</p>

<h2 id="step-1-access-the-express-package">Step 1: Access the express package</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">require()</code>: The require() method is used to load and cache JavaScript modules. So, if you want to load a local, relative JavaScript module into a Node.js application, you can simply use the require() method.</p>
</blockquote>

<pre><code class="language-JavaScript">const express = require('express');
</code></pre>

<h2 id="step-2-create-a-web-application">Step 2: Create a web application</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">express()</code>: The whole library basically comes in as a big function called <code class="language-plaintext highlighter-rouge">express()</code>.</p>
</blockquote>

<pre><code class="language-JavaScript">const app = express();
</code></pre>

<h2 id="step-3-listen-to-outside-requests">Step 3: Listen to outside requests</h2>

<p>Configure a port to listen to outside requests.</p>

<pre><code class="language-JavaScript">app.listen(3000, () =&gt; console.log('Listening at 3000'));
</code></pre>

<h2 id="step-4-serve-a-web-page">Step 4: Serve a web page</h2>

<p>The simpliest thing we want the server to do:</p>

<ul>
  <li>Serve web pages, like <code class="language-plaintext highlighter-rouge">index.html</code>.</li>
</ul>

<p>Make a public folder to host publicly accessible web pages and serve the page up in your server code blocks. <code class="language-plaintext highlighter-rouge">index.html</code> is a default, so you don’t have to explicitly specify it.</p>

<pre><code class="language-JavaScript">app.use(express.static('public'));
</code></pre>

<ul>
  <li>Routing</li>
  <li>JSON Parsing</li>
  <li>POST with fetch()</li>
</ul>
:ET