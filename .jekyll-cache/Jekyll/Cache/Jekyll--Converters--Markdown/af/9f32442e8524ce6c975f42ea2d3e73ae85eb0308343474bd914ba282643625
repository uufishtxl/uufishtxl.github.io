I";<h2 id="offset-属性--offset-dimension">offset 属性 | offset dimension</h2>

<p><img src="img/javascript/js_animation_offset_dimension.png" alt="offset dimension" /></p>

<h2 id="客户区大小-client-dimension">客户区大小 client dimension</h2>

<p>是指元素内容及其内边距所占据的空间的大小。</p>

<p><img src="img/javascript/js_animation_client_dimension.png" alt="client dimension" /></p>

<p>比如说，如果要了解<code class="language-plaintext highlighter-rouge">body</code>元素的客户区大小，可以这么做：<code class="language-plaintext highlighter-rouge">document.documentElement.clientHeight</code>，<code class="language-plaintext highlighter-rouge">document.documentElement.clientWidth</code>。</p>

<h2 id="滚动大小-scroll-dimension">滚动大小 scroll dimension</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">scrollHeight</code>: 没有滚动条的情况下（就是假设有内容所在的空间足够大，大到不用滚动条就能全部显示内容），元素内容的总高度</li>
  <li><code class="language-plaintext highlighter-rouge">scrollWidth</code>: 没有滚动条的情况下，元素内容的总宽度</li>
  <li><code class="language-plaintext highlighter-rouge">scrollLeft</code>: 被隐藏的内容区域左侧的像素数</li>
  <li><code class="language-plaintext highlighter-rouge">scrollTop</code>: 被隐藏的内容区域上方的像素数</li>
</ul>

<p><img src="img/javascript/js_animation_scroll_dimension.png" alt="client dimension" /></p>

<p>带有垂直滚动条的页面的总高度就是：<code class="language-plaintext highlighter-rouge">document.documentElement.scrollHeight</code>。</p>

<p>对于不包含滚动条的页面而言，scrollWidth 和 scrollHeight 与clientWidth、clientHeight之间的关系并不明确。</p>

<ul>
  <li>
    <p>Firefox: 两组属性相等，但是大小代表文档内容区域的实际尺寸，而非视口的尺寸。</p>
  </li>
  <li>
    <p>Opera, Safari 3.1 or above, Chrome: scrollWidth和scrollHeight等于视口大小，而clientWidth和clientHeight等于文档内容区域的大小。</p>
  </li>
  <li>
    <p>IE（在标准模式）：不相等。scrollWidth 和 scrollHeight等于文档内容区域的大小，而clientWidth 和 clientHeight 等于视口大小。</p>
  </li>
</ul>

<h2 id="视口大小">视口大小</h2>

<p>IE8以上的方法：</p>

<p><code class="language-plaintext highlighter-rouge">window.innerHeight</code> - 浏览器窗口内部高度</p>

<p><code class="language-plaintext highlighter-rouge">window.innerWidth</code> - 浏览器窗口内部宽度</p>

<p>标准模式下（CSS1Compat），inner可以视为包含滚动条的尺寸的视口。</p>

<p>而documentElement.client可以视为不包含滚动条尺寸的视口，两者在滚动条方向上相差17px;</p>

<p>混杂模式下（BackCompat）：ie10+的浏览器，三者的值是相同的。</p>

<h3 id="关于混杂模式和标准模式">关于混杂模式和标准模式</h3>

<p>来源：https://www.cnblogs.com/qianlegeqian/p/4067635.html</p>

<p>检查方法：<code class="language-plaintext highlighter-rouge">document.compatMode</code>，可能得到两种值：</p>

<ul>
  <li>CSS1Compat: 标准模式</li>
  <li>BackCompat: 混杂模式</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">DOCTYPE</code>的一个重要作用，就是告诉浏览器，它该以何种<mark>模式</mark>呈现。出现混杂模式的原因：</p>

<ul>
  <li>不写<code class="language-plaintext highlighter-rouge">&lt;!DOCTYPE html&gt;</code></li>
  <li>&lt;!DOCTYPE html&gt;前面加上xml声明 &lt;?xml version=”1.0” encoding=”utf-8”?&gt; (IE6)</li>
  <li>&lt;!DOCTYPE html&gt;和&lt;?xml version=”1.0” encoding=”utf-8”?&gt;之间加了（标签、文本、注释）(ie8以下都有，ie9以上未测)</li>
  <li>&lt;!DOCTYPE html&gt;前面有（标签、文本、注释）(ie8以下都有，ie9以上未测)</li>
</ul>

<p>之所以要区分混杂模式与严格模式，是因为w3c标准和IE传统标准对于盒模型的解析不一样等等。</p>

:ET