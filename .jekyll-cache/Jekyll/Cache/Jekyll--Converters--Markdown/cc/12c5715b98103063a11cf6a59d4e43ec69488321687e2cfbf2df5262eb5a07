I"<h2 id="constructor-functions">Constructor functions</h2>

<ol>
  <li>Start a function name with a capitalized letter, in this case, the <strong>P</strong> in <em>Person</em>.</li>
  <li>Pass in the properties you want to be able to set, <code class="language-plaintext highlighter-rouge">firstName, lastName, dob</code> here.</li>
  <li>Set as the properties of the object. We do that with <code class="language-plaintext highlighter-rouge">this</code>.
Meaning <code class="language-plaintext highlighter-rouge">this.dob</code> equals the dob passed in.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Constructor 
function Person(firstName, lastName, dob) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.dob = dob;
}

// Instantiate object
const person1 = new Person('John', 'Doe', '4-3-1980');
const person2 = new Person('Marry', 'Smith', '3-6-1970');
console.log(person1)
console.log(person2.firstName);
</code></pre></div></div>

<p>The printout as a result of <code class="language-plaintext highlighter-rouge">console.log(person1)</code> is prefixed with the actual name of the object, which is <code class="language-plaintext highlighter-rouge">Person</code>.</p>

<h3 id="taking-a-side-route-date-constructor">Taking a side route: Date constructor</h3>

<p>Let’s turn the date string into a date object using the date constructor.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//Constructor
function Person(firstName, lastName, dob) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.dob = new Date(dob);
}

// Instantiate object
const person1 = new Person('John', 'Doe', '4-3-1980');
const person2 = new Person('Marry', 'Smith', '3-6-1970');

console.log(person1.dob);
console.log(person2.dob.getDate());
</code></pre></div></div>

<h4 id="creating-a-javascript-date-instance">Creating a JavaScript date instance</h4>

<blockquote>
  <p>Creates a JavaScript Date instance that represents a single moment in time in a platform-independent format.</p>
</blockquote>

<table>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">new Date()</code></td>
      <td>no parameters provided, <br />so the date object represents the current date and time</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">new Date(value)</code></td>
      <td>An integer value <br />representing the number of milliseconds since January 1, 1970 00:00:00 UTC<br /> for example, <code class="language-plaintext highlighter-rouge">new Date(1563763956000)</code></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">new Date(datestring)</code></td>
      <td>A string value representing a date<br />For example, <code class="language-plaintext highlighter-rouge">new Date('4-3-1980')</code></td>
    </tr>
  </tbody>
</table>

<p>When you have a date object, there are a bunch of methods you can call on, such as <code class="language-plaintext highlighter-rouge">getDate</code>.</p>

<h3 id="add-methods-into-a-class">Add methods into a class</h3>

<p>Add methods which are basically just functions to this person object.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//Constructor
function Person(firstName, lastName, dob) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.dob = new Date();
    this.getBirthYear = function() {
      return this.dob.getFullYear();
    }
    this.getFullName = function() {
        return `${this.firstName} ${this.lastName}`;
    }
  }
  
  //Intantiate object
  const person1 = new Person('John', 'Doe', '4-3-1980');
  
  console.log(person1.getBirthYear());
  console.log(person1.getFullName());
</code></pre></div></div>

<h3 id="prototypes">Prototypes</h3>

<p>Previously, we have created <code class="language-plaintext highlighter-rouge">class</code> using constructor functions. This, however, is not a perfect way in that properties and functions emerge side by side, like this:</p>

<p><img src="img/oop_juxtapose.png" alt="juxtapose" /></p>

<p>So we likely wish to put the functions under prototypes (using prototype methods), like this</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//Constructor
function Person(firstName, lastName, dob) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.dob = new Date();
  }

  Person.prototype.getBirthYear = function() {
    return this.dob.getFullYear;
  }

  Person.prototype.getFullName = function() {
      return `${this.firstName} ${this.lastName}`;
  }
  
  //Intantiate object
  const person1 = new Person('John', 'Doe', '4-3-1980');
  
  console.log(person1.getBirthYear());
  console.log(person1.getFullName());
  console.log(person1);
</code></pre></div></div>

<h2 id="es6-powered-class-with-methods">es6-powered class with methods</h2>

<p>Do the same thing in a much prettier way, which is known as syntactic sugar.</p>

<blockquote>
  <p>JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar over JavaScript’s existing prototype-based inheritance.</p>
</blockquote>

<blockquote>
  <p><strong>What is Syntactic sugar?</strong></p>

  <p>In computer science, syntactic sugar is syntax within a programming language that is designed to make things easier to read or to express.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//Class
class Person {
  constructor(firstName,lastName,dob) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.dob = new Date(dob);
  }
  
  getBirthYear() {
    return this.dob.getFullYear;
  }
  
  getFullName() {
    return `${this.firstName} ${this.lastName}`;
  }
}

  //Intantiate object
  const person1 = new Person('John', 'Doe', '4-3-1980');
  
console.log(person1.getBirthYear());
console.log(person1.getFullName());
console.log(person1);
</code></pre></div></div>
:ET