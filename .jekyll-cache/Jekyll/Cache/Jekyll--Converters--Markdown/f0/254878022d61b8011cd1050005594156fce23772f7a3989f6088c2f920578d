I"ý<h2 id="resources">Resources</h2>

<h3 id="video-tutorial-learn-sass-in-20-minutes">Video tutorial: Learn Sass in 20 minutes</h3>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/Zz6eOVaaelI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<h3 id="online-tutorial">Online tutorial</h3>

<p><a href="https://sass-lang.com/guide">Online Tutorial</a></p>

<h2 id="preprocessing-install-conversion-plugin">Preprocessing: Install conversion plugin</h2>

<p>Given that the browser itself cannot read <code class="language-plaintext highlighter-rouge">Sass</code>, you have to compile your <code class="language-plaintext highlighter-rouge">Sass</code> to <code class="language-plaintext highlighter-rouge">css</code>. This is where <strong>Live Sass Compiler</strong> comes into play. Find the plugin on your <strong>VS Code</strong> and get it installed. When install completes, you may find its icon at the lower-right corner. Each time you kick into Sass editing, click the icon to get it run.</p>

<p>Once you start tinkering with Sass, it will take your preprocessed Sass file and save it as a normal CSS fiel that you can use in your website.</p>

<h2 id="nifty-goodies-sass-can-do">Nifty goodies Sass can do</h2>

<h3 id="minify-coding-efforts-across-different-browsers">Minify coding efforts across different browsers</h3>

<p>Just type <code class="language-plaintext highlighter-rouge">display: flex</code>. Sass immediately enables your page to best fill the available space at the cost of a minimum of difficulty.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>display: flex;
</code></pre></div></div>

<p>This approach applies to all the other CSS properties that might not work cross browsers.</p>

<h4 id="what-is-flex">What is flex?</h4>

<blockquote>
  <p>The <strong>Flexbox Layout</strong> (Flexible Box) module aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknow and/or dynamic (thus the word â€˜flexâ€™).</p>
</blockquote>

<p>Click <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">HERE</a> if you like to expand your knowledge base around Flexbox.</p>

<h3 id="variables">Variables</h3>

<p>You no longer have to bother yourself changing the same properties for different elements one after another. Store information you want to reuse in variables. The following is an example.</p>

<h4 id="step-1-declare-a-variable">Step 1: Declare a variable</h4>

<p>Use the symbol <code class="language-plaintext highlighter-rouge">$</code> to make something a variable.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$primaryBtn : rgb(146, 56, 124);
$textColor: rgb(43, 43, 43);
</code></pre></div></div>

<h4 id="step-2-reuse-a-variable-all-through-the-sass">Step 2: Reuse a variable all through the sass</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>header {
  ...
  button {
    background: $primaryBtn;
  }
}
.contact button {
    background: $primaryBtn;
} 
</code></pre></div></div>

<p>By doing so, you can change the background color by editing the variable alone, rather than going all through the file.</p>

<h3 id="nesting">Nesting</h3>

<p>Have styling definitions nestled within ancestors, just like what they appear in <code class="language-plaintext highlighter-rouge">html</code> hierarchies. What if youâ€™d like to define a focus or a hover? Not to worry. Precede the normal <code class="language-plaintext highlighter-rouge">css</code> expression with the symbol <code class="language-plaintext highlighter-rouge">&amp;</code>, for example, <code class="language-plaintext highlighter-rouge">&amp;:hover</code>, <code class="language-plaintext highlighter-rouge">&amp;::after</code>, you get it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>header {
    
    background: lightblue;
    height: 20vh;
    display: flex;
    justify-content: center;
    align-items: center;
    color: $textColor;
    button {
        background: $primaryBtn;
        &amp;:hover {
            background: red;
        }
        &amp;::after {
            content: "Hello~"

        }
    }
}
</code></pre></div></div>

<h3 id="segmenting">Segmenting</h3>

<p>A <code class="language-plaintext highlighter-rouge">css</code> file normally is comprehensive of all the elments through your web page. With <code class="language-plaintext highlighter-rouge">sass</code>, you may divide your styling into as many segments as you wish.</p>

<h4 id="build-a-segment">Build a segment</h4>

<p>Define the necessary properties in a separate file. Note that its name should start with an underscore <code class="language-plaintext highlighter-rouge">_</code>, for example, <code class="language-plaintext highlighter-rouge">_header.scss</code>.</p>

<h4 id="import-segments-into-the-primary-styling-bank">Import segments into the primary styling bank</h4>

<p><code class="language-plaintext highlighter-rouge">sass</code> knows how to go about the integration. This increases the readability of your styling files.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@import './header';
</code></pre></div></div>

<h3 id="mix-ins-allowing-functions">Mix-ins: Allowing functions</h3>

<h4 id="step-1-definition">Step 1: Definition</h4>

<p>Name your mix-in function and specify the properties.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@mixin flexCenter {
  display: flex;
  justify-content: center;
  align-items: center;
}
</code></pre></div></div>

<h4 id="step-2-referenciing">Step 2: Referenciing</h4>

<p>@ include the mix-in function name to make quotations.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>header {
  ...
  @include flexCenter();
  ...
}
...
.contact {
  @include flexCenter();
}
</code></pre></div></div>

<h4 id="step-3-passing-parameters">Step 3: Passing parameters</h4>

<p>You may even pass aguments into a function to allow changes.</p>

<ol>
  <li>
    <p>Use a variable which starts with a dollar sign, which is the parameter. And relate it to the property that shall change based on the argument you pass in.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>...
@mixin flexCenter($direction, $background) {
...
flex-direction: $direction;
background: $background
...
}
...
</code></pre></div>    </div>
  </li>
  <li>
    <p>Now you may actually pass an actual argument into the function. Different values result in different stylings.</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>header {
  @include flexCenter(column, red);
}
...
contact {
  @include flexCenter(row, green);
}
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="extentions">Extentions</h3>

<p>Sassâ€™s extention capability enables elements to inherit all the properties of another element. Use <code class="language-plaintext highlighter-rouge">@extend</code> and specify the name of the element you want to make a copy, for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>contact {
  @extend header;
}
</code></pre></div></div>

<p>If you want to overwrite a particular property among the existent ones, define it below the @extend line.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>contact {
  @extend header;
  background: lightcoral;
}
</code></pre></div></div>

<h3 id="do-operations">Do operations</h3>

<p>This is super obvious from its name.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>width: 100% - 20%;
</code></pre></div></div>

:ET