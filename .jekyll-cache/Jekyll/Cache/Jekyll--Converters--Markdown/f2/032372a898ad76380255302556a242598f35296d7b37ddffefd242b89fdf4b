I"ù	<h2 id="resources">Resources</h2>

<h3 id="video-tutorial-javascript-crash-course">Video tutorial: JavaScript Crash Course</h3>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/hdI2bqOjy3c" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<h2 id="variables">Variables</h2>

<h3 id="var-let-and-const"><code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">const</code></h3>

<p>In JavaScript, there‚Äôre basically three ways to set variables. We have <code class="language-plaintext highlighter-rouge">var</code>, <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">const</code>.</p>

<p><code class="language-plaintext highlighter-rouge">var</code> comes into view from the beginning of JavaScript. But you won‚Äôt really want to use it anymore now that we‚Äôve got <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">const</code>, because <code class="language-plaintext highlighter-rouge">var</code> is globally scoped, while <code class="language-plaintext highlighter-rouge">let</code> and <code class="language-plaintext highlighter-rouge">const</code> has block-level scopes.</p>

<p>With <code class="language-plaintext highlighter-rouge">let</code>, you can reassign values. <code class="language-plaintext highlighter-rouge">const</code> stands for <em>constant</em>, which means its value cannot be reassigned.</p>

<p>Using <code class="language-plaintext highlighter-rouge">const</code> allows you to add values to arrays. You can manipulate it, you can use methods on it. The only thing you can‚Äôt do is to take the array and reassign it.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const fruits = ['apples', 'oranges', 'pears']
fruits[3] = 'grapes';
console.log(fruits);
</code></pre></div></div>

<p>The console prints out grapes as well. This, however, is not the best practice to add a value into an array. See <a href="/js_methods.html#push">push</a> for a more refined solution.</p>

<p>Only use <code class="language-plaintext highlighter-rouge">const</code> unless you know you‚Äôre going to reassign the value.</p>
:ET