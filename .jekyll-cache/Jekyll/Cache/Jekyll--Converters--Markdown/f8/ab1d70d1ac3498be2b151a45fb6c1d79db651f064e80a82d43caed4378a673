I"c<p>This is based on Daniel Shiffman’s video tutorial on <strong>Working with Data and APIs in JavaScript</strong>.</p>

<h2 id="resource">Resource</h2>

<p><iframe width="560" height="315" src="https://www.youtube.com/embed/wxbQP1LMZsw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></p>

<h2 id="purpose">Purpose</h2>

<h2 id="step-1-make-sure-geolocation-service-is-available-on-client-side">Step 1: Make sure geolocation service is available on client side.</h2>

<pre><code class="language-JavaScript">if ("geolocation" in navigator) {
  console.log('geolocation is available');
} else {
  console.log('geolocation IS NOT available');
}
</code></pre>

<h2 id="step-2-get-the-current-position">Step 2: Get the current position</h2>

<p>Call the <code class="language-plaintext highlighter-rouge">getCurrentPosition</code> function which requires you to pass in a callback function that is executed when the position is ready to be retrieved.</p>

<pre><code class="language-JavaScript">if ("geolocation" in navigator) {
  console.log('geolocation is available');
  // get current position
  navigator.geolocation.getCurrentPosition(position =&gt; console.log(position.coords));
} else {
  console.log('geolocation IS NOT available');
  
}
</code></pre>

<h2 id="step-3-write-your-position-into-dom-elements">Step 3: Write your position into DOM elements</h2>

<pre><code class="language-JavaScript">if ("geolocation" in navigator) {
  console.log('geolocation is available');
  navigator.geolocation.getCurrentPosition(position =&gt; console.log(position.coords));
  const lat = position.coords.latitude;
  // Write to a DOM element
  document.getElementById('lat').textContent = lat.toFixed(2);
  const lon = position.coords.longitude;
   // Write to a DOM element
  document.getElementById('lon').textContent = lon.toFixed(2);
} else {
  console.log('geolocation IS NOT available');
}
</code></pre>

<h2 id="step-4-have-the-server-receive-data-from-the-client">Step 4: Have the server receive data from the client</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">app.post(path, callback [, callback ...])</code></p>

  <p><strong>Path</strong>: The path for which the middleware function is invoked;<br />
<strong>callback</strong>: callback functions<br />
Routes HTTP POST requests to the specified path with the specified callback functions.</p>

  <p>app.post(path, callback [, callback …])</p>
</blockquote>

<pre><code class="language-JavaScript">// api - setting up an application programming interface, can be any name
// The request variable refers to everything contained within the request, while the response a variable that we can use to send things back to the client
app.post('/api', (request, response) =&gt; {
  console.log(request);
});
</code></pre>

<h2 id="step-5-have-the-client-send-data-to-the-server">Step 5: Have the client send data to the server</h2>

<p>Move over to the client side and set up the <code class="language-plaintext highlighter-rouge">POST</code> itself using <code class="language-plaintext highlighter-rouge">fetch()</code>. Fetch the post over to <code class="language-plaintext highlighter-rouge">/api</code> endpoint.</p>

<pre><code class="language-JavaScript">if ("geolocation" in navigator) {
  console.log('geolocation is available');
  navigator.geolocation.getCurrentPosition(position =&gt; console.log(position.coords));
  const lat = position.coords.latitude;
  document.getElementById('lat').textContent = lat.toFixed(2);
  const lon = position.coords.longitude;
  document.getElementById('lon').textContent = lon.toFixed(2);
  // Make an object
  const data = { lat, lon };
  const options = {
    method: `POST`,
    // meta information
    headers: {
      // 
      'Content-Type': 'application/json'
    },
    // Take JavaScript object data and make it into a JSON string.
    body: JSON.stringify(data)


  };
  // Fetch the stuff from /api 
  // The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses
  fetch('/api', options); // to send a POST, we need a second argument here, options.
} else {
  console.log('geolocation IS NOT available');
}
</code></pre>
<h2 id="step-6-teach-the-server-to-parse-any-incoming-data-as-json">Step 6: Teach the server to parse any incoming data as JSON</h2>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">express.json([options])</code></p>

  <p>This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.</p>
</blockquote>

<pre><code class="language-JavaScript">app.use(express.json({ limit: '1mb' }));
</code></pre>

<h2 id="step-7-complete-the-request">Step 7: Complete the request</h2>

<p>When a <code class="language-plaintext highlighter-rouge">GET</code> request or a <code class="language-plaintext highlighter-rouge">POST</code> request is coming into the server, we should do something to complete it. To be a ‘polite’ server, it should send some response.</p>

<p>At a minimum, you should run this command:</p>

<pre><code class="language-JavaScript">response.end();
</code></pre>

<p>To make more sense, do this:</p>

<pre><code class="language-JavaScript">// make a variable
const data = request.body;
response.json({
  status: 'success',
  // send back the object data, for example
  latitude: data.lat,
  longitude: data.lon
})
</code></pre>
<h2 id="step-8handle-the-response-from-the-server">Step 8:Handle the response from the server</h2>

<p>In the client JS, the <code class="language-plaintext highlighter-rouge">fetch()</code> returns a promise. Let’s handle the response.</p>

<ol>
  <li>First of all, make the callback function an async function to make your code more elegant.
    <pre><code class="language-JavaScript">navigator.geolocation.getCurrentPosition(async position =&gt; {...};
</code></pre>
  </li>
  <li>Fetch the response and pare it.
    <pre><code class="language-JavaScript">navigator.geolocation.getCurrentPostion(async function =&gt; {
  ...
  const response = await fetch('/api', options);
  const responseJson = await response.json();
  console.log(responseJson);
  ...
});
</code></pre>
  </li>
  <li>Now, the response from the server is printed on the console.
<img src="img/api_js_geolocation_serverResponse_printout.png" alt="Console Printout" />;</li>
</ol>
:ET