I"¦<h2 id="looping">Looping</h2>

<h3 id="array-instance">Array instance</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const todos = [
    {
        id: 1,
        text: 'Take out of trash',
        isCompleted: true
    },
    {
        id: 2,
        text: 'Meeting with boss',
        isCompleted: true
    },
    {
        id: 3,
        text: 'Dentist appt',
        isCompleted: false
    }
];
</code></pre></div></div>

<h3 id="for-loop">For loop</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for(let i = 0; i &lt; 10; i++) {
  console.log(`For Loop Number: ${i}`);
}
</code></pre></div></div>

<h3 id="while-loop">While loop</h3>

<p>While looping sets the variables outside of the loops.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>let i = 0;
while(i &lt; 10) {
  console.log(`While Loop Number: ${i}`);
  i++;
}
</code></pre></div></div>

<h3 id="loop-through-an-array">Loop through an array</h3>

<p>A traditonal way to do this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for(let i = 0; i &lt; todos.length; i++) {
    console.log(todos[i].text);
}

</code></pre></div></div>

<h3 id="a-much-more-readable-solution">A much more readable solution</h3>

<p>Nonetheless, thereâ€™s a much more readable solution.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 'todo' is just a name; name it anything you like
for(let todo of todos){
  console.log(todo.text);
}
</code></pre></div></div>

<p>See? Dropping the <code class="language-plaintext highlighter-rouge">i</code> variable, this expression is way more graceful.</p>

<h3 id="high-order-array-methods">High order array methods</h3>

<p>Recommended for any kind of iteration with arrays.</p>

<h4 id="foreach"><code class="language-plaintext highlighter-rouge">forEach()</code></h4>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">forEach()</code> <strong>calls a provided <code class="language-plaintext highlighter-rouge">callback</code> function once for each element in any array</strong> in ascending order. It is not invoked for index properties that have been deleted or are uninitialized (i.e. on sparse arrays).</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>todos.forEach(function(todo) {
    console.log(todo.text);
});
</code></pre></div></div>

<h4 id="map"><code class="language-plaintext highlighter-rouge">map()</code></h4>

<blockquote>
  <p>The map() method creates a new array with the results of calling a provided function on every element in the calling array.</p>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var array1 = [1, 4, 9, 16];

// pass a function to map
const map1 = array1.map(x =&gt; x * 2);

console.log(map1);
// expected output: Array [2, 8, 18, 32]
</code></pre></div>  </div>
</blockquote>

<p>With map method, it returns an array. Here, we like to loop through the array literal and return an array of just the text values.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const todoText = todos.filter(function(todo) {
    return todo.text;
});

console.log(todoText);
</code></pre></div></div>

<h4 id="filter"><code class="language-plaintext highlighter-rouge">filter()</code></h4>

<p>Wield the <code class="language-plaintext highlighter-rouge">filter()</code> method to extract completed tasks:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const todoCompleted = todos.filter(function(todo) {
    return todo.isCompleted === true;
});

console.log(todoCompleted);
</code></pre></div></div>

<p>Employ the <code class="language-plaintext highlighter-rouge">map()</code> method in conjection with the <code class="language-plaintext highlighter-rouge">filter()</code> method to list the title of all completed tasks:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const todoCompletedText = todos.filter(function(todo) {
    return todo.isCompleted === true;
}).map(function(todo) {
    return todo.text;
});

console.log(todoCompletedText);
</code></pre></div></div>
:ET